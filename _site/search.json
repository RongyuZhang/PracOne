[
  {
    "objectID": "PracTwo.html",
    "href": "PracTwo.html",
    "title": "3  PracTwo",
    "section": "",
    "text": "#1.\n## Set seed\nset.seed(1)\nx = seq(1,100)\ne = rnorm(100, 0, 0.2)\ny &lt;- NULL\n\nfor( i in 1:100 ){\n  y[i] = sin(x[i]/10)+e[i]\n  i = i+1\n}\n\n\n#2.\n\ncustomLowess &lt;- function(x, y, f){\n  if (f&gt;0||f&lt;1){\n    n = length(x)\n    k = f*n \n    w &lt;- NULL ##weight for neighbour\n    smoothed_y &lt;- NULL  ##smoothed value for xi\n    \n    ## repeat for each xi\n    for (i in 1:n){\n      \n      distance = abs((x[i]-x)) \n      ordered_ind = order(distance) ## index of distance, ordered in ascending order of value of distance\n      neigbours_index = ordered_ind[1:round(k)] ## the index for the k number of closest neighbours\n      \n      dis_max = max(distance[neigbours_index])\n      \n      w = diag((1-((distance[neigbours_index])/dis_max)^3)^3)\n      \n      X = cbind(1, x[neigbours_index])\n      \n      beta = solve(t(X)%*%w%*%X)%*%t(X)%*%w%*%y[neigbours_index]\n      \n      smoothed_y[i] = beta[1] + beta[2]*x[i]\n      \n    }\n    \n    return(smoothed_y)\n  }\n  else{\n    stop(\"span of smoothing should follow: 0 &lt; f &lt; 1\")\n  }\n}\n\n\n#3.\n##using the customLowess\nsmoothed_custom &lt;- customLowess(x, y, f = 0.5)  \n\n##using the built-in Lowess\nsmoothed_builtin &lt;- lowess(x, y, f = 0.5)\n\nplot(x, y, main = \"Custom LOWESS Smoothing\", xlab = \"X\", ylab = \"Y\", pch = 16, col = \"gray\")\n\n\n\n\n\n\n\nplot(x, y, main = \"LOWESS Smoothing\", xlab = \"X\", ylab = \"Y\", pch = 16, col = \"gray\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PracTwo</span>"
    ]
  },
  {
    "objectID": "PracDayFour.html",
    "href": "PracDayFour.html",
    "title": "4  PracDayFour",
    "section": "",
    "text": "## Set Up Codes\n# Install tidyverse if not already installed\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Install and load nycflights13 for flight data\nif (!requireNamespace(\"nycflights13\", quietly = TRUE)) {\n  install.packages(\"nycflights13\")\n}\nlibrary(nycflights13)\n\n\n## 1. Display the dataset flights\ndplyr::glimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n\n#2.\n\nlibrary(dplyr)\n\n\ndist_tbl &lt;-  flights |&gt; \n  filter(month == 1) |&gt; \n  group_by(carrier) |&gt;\n  summarise(\n    mean_distance = mean (distance, na.rm = TRUE),\n    sd_distance = sd(distance, na.rm = TRUE) \n  )|&gt;\n  arrange(mean_distance)\n\n\n  dist_tbl\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0  \n\n\n\n#3.\n# the NA, 0 of standard deviation all means, there is no variability\n#When standard deviation is NA, it means that at least one value used to calculate is missing in the group.\n#When standard deviation is 0, it means that all the values in the group are exactly the same, no variance occure\n\nflights2 &lt;- tibble(\n  carrier = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"),\n  distance = c(1000, 1000, 1000, NA, NA, NA),\n  month = rep(1, 6)\n)\n\ndist_tbl2 &lt;- flights2 %&gt;%\n  filter(month == 1) %&gt;%\n  group_by(carrier) %&gt;%\n  summarise(\n    mean_distance = mean(distance, na.rm = TRUE),\n    sd_distance = sd(distance, na.rm = TRUE)\n  )\n\ndist_tbl2\n\n# A tibble: 2 × 3\n  carrier mean_distance sd_distance\n  &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n1 A                1000           0\n2 B                 NaN          NA\n\n\n\n#4. \nflights |&gt; \n  group_by(month, carrier) |&gt; \n  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), .groups = \"drop\") |&gt;  \n  pivot_wider(\n    names_from = carrier, values_from = avg_dep_delay)\n\n# A tibble: 12 × 17\n   month  `9E`    AA     AS    B6    DL    EV    F9    FL    HA    MQ    OO\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1 16.9   6.93  7.35   9.49  3.85 24.2  10     1.97 54.4   6.49 67   \n 2     2 16.5   8.28  0.722 13.8   5.54 21.5  29.8   5.18 17.4   8.09 NA   \n 3     3 13.4   8.70  8.42  14.2   9.93 26.2  16.8  17.3   1.16  7.19 NA   \n 4     4 13.6  11.7  11.3   15.2   8.17 22.8  24.6  13.1  -2.1  13.7  NA   \n 5     5 22.7   9.66  6.77   9.78  9.74 20.2  35.9  19.2  -1.45 13.9  NA   \n 6     6 29.0  14.6  13.1   20.4  18.7  25.5  29.4  38.8   1.47 20.8  61   \n 7     7 31.4  12.1   2.42  24.9  20.6  26.5  31.8  41.2  -1.71 20.7  NA   \n 8     8 17.3   7.17  2.87  15.7   9.85 16.3  22.2  23.4   1.68 10.1  64   \n 9     9  7.75  5.69 -4.52   6.63  5.53  8.24  8.26 16.9  -5.44  5.35 -4.94\n10    10  9.33  3.00  0.677  2.96  3.42 13.4   9.70 13.7  -5.10  4.48 NA   \n11    11  7.56  3.10  3.08   3.52  2.85  9.83 13.5  16.9  -5.44  3.28  0.8 \n12    12 19.8  11.7  18.0   17.0  10.8  27.9  13.1  26.1  -3.14 12.7  NA   \n# ℹ 5 more variables: UA &lt;dbl&gt;, US &lt;dbl&gt;, VX &lt;dbl&gt;, WN &lt;dbl&gt;, YV &lt;dbl&gt;\n\n\n\n#5. \nflights |&gt; \n  filter(dep_delay&gt;0, arr_delay&lt;=0) |&gt; \n  summarise(proportion = n()/nrow(flights))\n\n# A tibble: 1 × 1\n  proportion\n       &lt;dbl&gt;\n1      0.105\n\n\n\n#6. \n# Part 1 created joined_tbl that joins the arline and flights dataset\njoined_tbl &lt;- flights |&gt; \n  left_join(airlines, join_by(carrier)) |&gt; \n  group_by(origin, dest)\n## non-distint_route is generated to display the routes that flew by more than 1 airline\nnon_distinct_route &lt;- joined_tbl |&gt; \n  arrange(origin) |&gt; ##noA is the number of distinct carriers that flies the route\n  summarise (noA = n_distinct(carrier), .groups = \"drop\")|&gt;  \n  filter(noA &gt;1) ## find the ones with multiple distinct airlines\n\n## the routes that more than 1 airline flies\nnon_distinct_route |&gt; \n  select(1:2) \n\n# A tibble: 128 × 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    ATL  \n 2 EWR    AUS  \n 3 EWR    BDL  \n 4 EWR    BNA  \n 5 EWR    BOS  \n 6 EWR    BWI  \n 7 EWR    CHS  \n 8 EWR    CLE  \n 9 EWR    CLT  \n10 EWR    CVG  \n# ℹ 118 more rows\n\n\n\n# Part 2\nave_arr_delay &lt;- non_distinct_route |&gt; \n  left_join(joined_tbl, join_by(origin, dest)) |&gt; \n  group_by(origin, dest, name) |&gt; \n  summarise(\n    average_arrival_delay = mean(na.omit(arr_delay)), .groups = \"drop\"\n    )\n\n## returns the average arrival delay for each airline for each route\nave_arr_delay\n\n# A tibble: 343 × 4\n   origin dest  name                     average_arrival_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                                    &lt;dbl&gt;\n 1 EWR    ATL   Delta Air Lines Inc.                     10.0 \n 2 EWR    ATL   Endeavor Air Inc.                        -6.25\n 3 EWR    ATL   ExpressJet Airlines Inc.                 19.5 \n 4 EWR    ATL   United Air Lines Inc.                    10.5 \n 5 EWR    AUS   Southwest Airlines Co.                  -11.2 \n 6 EWR    AUS   United Air Lines Inc.                     4.28\n 7 EWR    BDL   ExpressJet Airlines Inc.                  6.78\n 8 EWR    BDL   United Air Lines Inc.                    22.6 \n 9 EWR    BNA   ExpressJet Airlines Inc.                 17.7 \n10 EWR    BNA   Southwest Airlines Co.                   -2.13\n# ℹ 333 more rows\n\n\n\n#Part 3\nworst_best_delay &lt;-  ave_arr_delay |&gt;\n  group_by(origin,dest) |&gt; \n  arrange(average_arrival_delay) |&gt; ## arrange the average_arrival_delays in ascending order\n  summarise(\n    worst = last(name), ## then the worst would be the last one of the route\n    best = first(name),\n    .groups = \"drop\"\n            )\n  \nworst_best_delay\n\n# A tibble: 128 × 4\n   origin dest  worst                    best                    \n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                    &lt;chr&gt;                   \n 1 EWR    ATL   ExpressJet Airlines Inc. Endeavor Air Inc.       \n 2 EWR    AUS   United Air Lines Inc.    Southwest Airlines Co.  \n 3 EWR    BDL   United Air Lines Inc.    ExpressJet Airlines Inc.\n 4 EWR    BNA   ExpressJet Airlines Inc. Southwest Airlines Co.  \n 5 EWR    BOS   JetBlue Airways          ExpressJet Airlines Inc.\n 6 EWR    BWI   ExpressJet Airlines Inc. Southwest Airlines Co.  \n 7 EWR    CHS   ExpressJet Airlines Inc. United Air Lines Inc.   \n 8 EWR    CLE   United Air Lines Inc.    ExpressJet Airlines Inc.\n 9 EWR    CLT   ExpressJet Airlines Inc. US Airways Inc.         \n10 EWR    CVG   ExpressJet Airlines Inc. Endeavor Air Inc.       \n# ℹ 118 more rows\n\n\n\n# Part 4\ngreatest_diff_perform_route &lt;-  ave_arr_delay |&gt;\n  group_by(origin,dest) |&gt; \n  arrange(average_arrival_delay) |&gt; ## arrange the average_arrival_delays in ascending order\n  summarise(\n    difference = last(average_arrival_delay)-first(average_arrival_delay), ## then the difference between the best and worst performing\n    .groups = \"drop\"\n            ) |&gt; \n  arrange(desc(difference))\n\ngreatest_diff_perform_route[1,]\n\n# A tibble: 1 × 3\n  origin dest  difference\n  &lt;chr&gt;  &lt;chr&gt;      &lt;dbl&gt;\n1 JFK    ATL         127.\n\n\n\n# Part 5\nworst_best_delay |&gt;\n  filter(origin == \"JFK\", dest == \"ATL\") |&gt;\n  select(3:4)\n\n# A tibble: 1 × 2\n  worst                    best             \n  &lt;chr&gt;                    &lt;chr&gt;            \n1 ExpressJet Airlines Inc. Endeavor Air Inc.\n\n## it is observed that the route with the biggest difference between the best and worst performing airline, its best performing airline is : ndeavor Air Inc. worst performing airline is :ExpressJet Airlines Inc.\n\nno_worstA = worst_best_delay |&gt; \n  count(worst) |&gt; \n  arrange(desc(n))\n\nno_bestA = worst_best_delay |&gt; \n  count(best) |&gt;\n  arrange(desc(n))\n\nno_bestA \n\n# A tibble: 12 × 2\n   best                         n\n   &lt;chr&gt;                    &lt;int&gt;\n 1 Delta Air Lines Inc.        34\n 2 Endeavor Air Inc.           34\n 3 United Air Lines Inc.       17\n 4 ExpressJet Airlines Inc.    14\n 5 American Airlines Inc.       8\n 6 JetBlue Airways              6\n 7 Envoy Air                    4\n 8 Southwest Airlines Co.       4\n 9 Virgin America               3\n10 US Airways Inc.              2\n11 Alaska Airlines Inc.         1\n12 Mesa Airlines Inc.           1\n\n## Endeavor Air Inc. has counted 34 times as the best airline performance, which has counted the most, as the best airline in all routes.\n\nno_worstA\n\n# A tibble: 13 × 2\n   worst                        n\n   &lt;chr&gt;                    &lt;int&gt;\n 1 ExpressJet Airlines Inc.    40\n 2 JetBlue Airways             28\n 3 Endeavor Air Inc.           17\n 4 United Air Lines Inc.       12\n 5 Envoy Air                   11\n 6 American Airlines Inc.       6\n 7 Delta Air Lines Inc.         4\n 8 Southwest Airlines Co.       3\n 9 SkyWest Airlines Inc.        2\n10 Virgin America               2\n11 Frontier Airlines Inc.       1\n12 Mesa Airlines Inc.           1\n13 US Airways Inc.              1\n\n## ExpressJet Airlines Inc. has counted 40 times as the worst airline performance, which has counted the most, as the worst airline in all routes.\n\n## Therefore, as route above uses these 2 airlines, the difference of performing will be greatest as the best will perfrm very well, and the worst will perform very bad.\n\n\n#7. \nfinal &lt;- structure(list(id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \n\"id_6\", \"id_7\", \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \n\"id_14\", \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \n\"id_21\", \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \n\"id_28\", \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \n\"id_35\", \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \n\"id_42\", \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \n\"id_49\", \"id_50\"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, \n73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, \n47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, \n36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, \n42L, 46L, 79L, 72L), gender = c(\"male\", \"male\", \"male\", \"female\", \n\"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n\"male\", \"male\", \"male\", \"male\", \"female\", \"femal\", \"male\", \"female\", \n\"female\", \"female\", \"female\", \"male\", \"female\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"female\", \"female\", \"male\", \n\"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n\"male\", \"female\"), height = c(174.4, 197.7, 174.1, 194.5, NA, \n180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, \n197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, \n154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, \n189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, \n153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, \n69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, \n87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, \n76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, \n95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, \n78.6, 61.9, 98.1), blood_type = c(\"O\", \"A\", \"O\", \"O\", \"B\", \"AB\", \n\"O\", \"O\", \"O\", \"AB\", \"A\", \"O\", \"O\", \"O\", \"B\", \"A\", \"B\", \"AB\", \n\"O\", \"AB\", \"A\", \"AB\", \"O\", \"B\", \"A\", \"A\", \"B\", \"AB\", \"A\", \"B\", \n\"B\", \"A\", \"O\", \"O\", \"O\", \"B\", \"O\", \"A\", \"A\", \"B\", \"A\", \"O\", \"AB\", \n\"A\", \"A\", \"O\", \"O\", \"B\", \"A\", \"O\"), disease_status = c(\"diseased\", \n\"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"Healthy\", \"diseased\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n\"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"diseased\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \"diseased\", \n\"diseased\"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, \n199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, \n165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, \n199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, \n173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, \nNA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, \n97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, \n75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), \n    smoker = c(\"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"yes\", \"no\", \n    \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \n    \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \n    \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\"), exercise = c(\"occasional\", \n    \"regular\", \"occasional\", \"regular\", \"none\", \"occasional\", \n    \"regular\", \"none\", \"occasional\", \"none\", \"occasional\", \"none\", \n    \"none\", \"regular\", \"occasional\", \"none\", \"regular\", \"regular\", \n    \"none\", \"occasional\", \"none\", \"occasional\", \"occasional\", \n    \"occasional\", \"regular\", \"occasional\", \"regular\", \"regular\", \n    \"regular\", \"occasional\", \"occasional\", \"none\", \"none\", \"regular\", \n    \"occasional\", \"occasional\", \"none\", \"none\", \"none\", \"none\", \n    \"occasional\", \"regular\", \"regular\", \"none\", \"regular\", \"occasional\", \n    \"occasional\", \"none\", \"occasional\", \"regular\"), income = c(84820L, \n    81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, \n    88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, \n    54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, \n    88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, \n    51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, \n    47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, \n    55810L), education = c(\"master\", \"bachelor\", \"PhD\", \"master\", \n    \"bachelor\", \"highschool\", \"PhD\", \"highschool\", \"PhD\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"bachelor\", \"PhD\", \"PhD\", \n    \"PhD\", \"bachelor\", \"master\", \"highschool\", \"PhD\", \"highschool\", \n    \"bachelor\", \"master\", \"highschool\", \"highschool\", \"master\", \n    \"master\", \"bachelor\", \"PhD\", \"highschool\", \"PhD\", \"master\", \n    \"master\", \"master\", \"PhD\", \"highschool\", \"master\", \"master\", \n    \"highschool\", \"bachelor\", \"highschool\", \"bachelor\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"highschool\", \"bachelor\", \n    \"bachelor\"), region = c(\"North\", \"South\", \"North\", \"West\", \n    \"North\", \"West\", \"South\", \"South\", \"West\", \"South\", \"West\", \n    \"South\", \"West\", \"East\", \"North\", \"West\", \"North\", \"North\", \n    \"West\", \"North\", \"East\", \"West\", \"South\", \"North\", \"North\", \n    \"East\", \"East\", \"North\", \"North\", \"West\", \"South\", \"West\", \n    \"West\", \"East\", \"West\", \"North\", \"West\", \"North\", \"East\", \n    \"North\", \"West\", \"South\", \"South\", \"East\", \"North\", \"West\", \n    \"West\", \"East\", \"North\", \"East\"), marital_status = c(\"divorced\", \n    \"single\", \"divorced\", \"divorced\", \"divorced\", \"divorced\", \n    \"divorced\", \"married\", \"divorced\", \"married\", \"divorced\", \n    \"widowed\", \"married\", \"single\", \"widowed\", \"widowed\", \"single\", \n    \"divorced\", \"widowed\", \"widowed\", \"single\", \"married\", \"single\", \n    \"married\", \"widowed\", \"married\", \"single\", \"single\", \"widowed\", \n    \"married\", \"widowed\", \"divorced\", \"single\", \"married\", \"single\", \n    \"widowed\", \"widowed\", \"married\", \"widowed\", \"divorced\", \"married\", \n    \"married\", \"divorced\", \"single\", \"married\", \"widowed\", \"divorced\", \n    \"divorced\", \"single\", \"divorced\")), row.names = c(NA, -50L\n), class = c(\"tbl_df\", \"tbl\", \"data.frame\"))\n\n\nUtilsDataRSV::view_cols(final)\n\n[1] \"id\"\n [1] \"id_15\" \"id_37\" \"id_19\" \"id_26\" \"id_35\" \"id_50\" \"id_11\" \"id_42\" \"id_5\" \n[10] \"id_34\" \"id_45\" \"id_41\" \"id_2\"  \"id_44\" \"id_30\" \"id_47\" \"id_32\" \"id_4\" \n[19] \"id_23\" \"id_17\"\n[1] \"30 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"age\"\n[1] 44 54 51 71 34\n[1] \"_____________________\"\n[1] \"gender\"\n[1] \"femal\"  \"male\"   \"female\"\n[1] \"_____________________\"\n[1] \"height\"\n[1] 192.1 170.2 161.0 181.0    NA\n[1] \"_____________________\"\n[1] \"weight\"\n[1] 60.8 68.6 96.9 61.9 79.7\n[1] \"_____________________\"\n[1] \"blood_type\"\n[1] \"A\"  \"O\"  \"AB\" \"B\" \n[1] \"_____________________\"\n[1] \"disease_status\"\n[1] \"diseased\" \"healthy\"  \"Healthy\" \n[1] \"_____________________\"\n[1] \"cholesterol\"\n[1] 180 236 164 230 185\n[1] \"_____________________\"\n[1] \"glucose\"\n[1]  97  88 109 101  NA\n[1] \"_____________________\"\n[1] \"smoker\"\n[1] \"no\"  \"yes\"\n[1] \"_____________________\"\n[1] \"exercise\"\n[1] \"regular\"    \"occasional\" \"none\"      \n[1] \"_____________________\"\n[1] \"income\"\n[1] 56261 62405 29586 84820 62615\n[1] \"_____________________\"\n[1] \"education\"\n[1] \"highschool\" \"PhD\"        \"bachelor\"   \"master\"    \n[1] \"_____________________\"\n[1] \"region\"\n[1] \"South\" \"North\" \"East\"  \"West\" \n[1] \"_____________________\"\n[1] \"marital_status\"\n[1] \"single\"   \"married\"  \"widowed\"  \"divorced\"\n[1] \"_____________________\"\n\n\nWarning: Not all unique entries displayed for these non-numeric cols: id\n\n### 1. From the output, we can see in column \"gender\", we have 3 distinct types: male, femal, female. Which we can see femal shouldn't be there, it was a typo, should be female.\n### 2. Also for column \"disease_status\", there was also typo, there is Healthy and healthy, we can choose to keep with one of them and change the other.\n### 3. we can see that column \"height\" and \"glucose\" contains NA as the distinct values, which means they have missing values\n\nfinal[!complete.cases(final),]\n\n# A tibble: 5 × 15\n  id      age gender height weight blood_type disease_status cholesterol glucose\n  &lt;chr&gt; &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;                &lt;dbl&gt;   &lt;dbl&gt;\n1 id_5     22 female    NA    78.6 B          healthy                166     103\n2 id_8     73 male     157.   60.9 O          healthy                199      NA\n3 id_15    45 male     178.   87   B          diseased               234      NA\n4 id_20    76 male      NA    59.2 AB         healthy                180      87\n5 id_40    51 female   170.   66.1 B          healthy                162      NA\n# ℹ 6 more variables: smoker &lt;chr&gt;, exercise &lt;chr&gt;, income &lt;int&gt;,\n#   education &lt;chr&gt;, region &lt;chr&gt;, marital_status &lt;chr&gt;\n\n## Also from this output, we can see that column \"height\" and \"glucose\" have missing values",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>PracDayFour</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "index",
    "section": "",
    "text": "0.1 Quarto\n## Below is my link for github\n# https://github.com/RongyuZhang/PracOne\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>index</span>"
    ]
  },
  {
    "objectID": "index.html#running-code",
    "href": "index.html#running-code",
    "title": "index",
    "section": "0.2 Running Code",
    "text": "0.2 Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>index</span>"
    ]
  }
]